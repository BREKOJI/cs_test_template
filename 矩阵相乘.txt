#include <iostream>
#include <vector>

using namespace std;

// 函数用于矩阵相乘
vector<vector<int>> matrixMultiply(const vector<vector<int>>& A, const vector<vector<int>>& B) {
    int rowsA = A.size();
    int colsA = A[0].size();
    int colsB = B[0].size();

    // 初始化结果矩阵C，大小为rowsA x colsB，初始值为0
    vector<vector<int>> C(rowsA, vector<int>(colsB, 0));

    // 矩阵相乘
    for (int i = 0; i < rowsA; ++i) {
        for (int j = 0; j < colsB; ++j) {
            for (int k = 0; k < colsA; ++k) {
                C[i][j] += A[i][k] * B[k][j];
            }
        }
    }

    return C;
}

// 函数用于打印矩阵
void printMatrix(const vector<vector<int>>& matrix) {
    for (const auto& row : matrix) {
        for (int elem : row) {
            cout << elem << " ";
        }
        cout << endl;
    }
}

int main() {
    // 定义两个矩阵A和B
    vector<vector<int>> A = {{1, 2, 3}, {4, 5, 6}};
    vector<vector<int>> B = {{7, 8}, {9, 10}, {11, 12}};

    // 计算矩阵相乘
    vector<vector<int>> C = matrixMultiply(A, B);

    // 打印结果矩阵C
    cout << "Matrix C (Result of A * B):" << endl;
    printMatrix(C);

    return 0;
}