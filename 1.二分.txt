class Solution {
    int lower_bound(vector<int>& nums, int target) {
        int left = 0, right = (int) nums.size() - 1; 
        while (left <= right) { 
            int mid = left + (right - left) / 2;
            if (nums[mid] >= target) right = mid - 1; //right最后都会在left左边一个
            else left = mid + 1; 
        }
        return left;
    }
};//求left边界就lower_bound(nums, target);    求right边界就lower_bound(nums, target + 1) - 1;

//下面是y总的
#include <iostream>

using namespace std;

const int N = 100010;

int n, m;
int q[N];

int main()
{
    scanf("%d%d", &n, &m);
    for (int i = 0; i < n; i ++ ) scanf("%d", &q[i]);

    while (m -- )
    {
        int x;
        scanf("%d", &x);

        int l = 0, r = n - 1;
        while (l < r)
        {
            int mid = l + r >> 1;
            if (q[mid] >= x) r = mid;
            else l = mid + 1;
        }

        if (q[l] != x) cout << "-1 -1" << endl;
        else
        {
            cout << l << ' ';

            int l = 0, r = n - 1;
            while (l < r)
            {
                int mid = l + r + 1 >> 1;
                if (q[mid] <= x) l = mid;
                else r = mid - 1;
            }

            cout << l << endl;
        }
    }

    return 0;
}

作者：yxc
链接：https://www.acwing.com/activity/content/code/content/39787/
来源：AcWing
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。