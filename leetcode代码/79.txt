class Solution {
    int rows, cols;
    bool dfs(vector<vector<char>>& board, string word, int r, int c, int k) {
        if (r >= rows || r < 0 || c >= cols || c < 0 || board[r][c] != word[k]) return false;
        if (k == word.size() - 1) return true;
        board[r][c] = '\0';
        bool res = dfs(board, word, r + 1, c, k + 1) || dfs(board, word, r - 1, c, k + 1) ||
                    dfs(board, word, r, c + 1, k + 1) || dfs(board, word, r, c - 1, k + 1);
        board[r][c] = word[k];
        return res;
    }
public:
    bool exist(vector<vector<char>>& board, string word) {
        rows = board.size();
        cols = board[0].size();
        for (int r = 0; r < rows; r ++ ) {
            for (int c = 0; c < cols; c ++ ) {
                if (dfs(board, word, r, c, 0)) return true;
            }
        }
        return false;
    }
};