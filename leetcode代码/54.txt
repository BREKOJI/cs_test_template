class Solution {
    vector<int> ans;
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        int n = matrix.size(), m = matrix[0].size();
        if (n == 1) return {matrix[0]};
        if (m == 1) {
            for (int i = 0; i < n; i ++ ) {
                ans.emplace_back(matrix[i][0]);
            }
            return ans;
        }
        vector st(n, vector<bool> (m));
        int directions [4][2] = {
            {0, 1}, {1, 0}, {0, -1}, {-1, 0}
        };
        int count = 0;
        int amount = n * m;
        int pos[2] = {0, 0};
        for (int i = 0; i < amount; i ++ ) {
            ans.push_back(matrix[pos[0]][pos[1]]);
            st[pos[0]][pos[1]] = true;
            int nx = pos[0] + directions[count][0], ny = pos[1] + directions[count][1];
            if (nx >= 0 && nx <= n - 1 && ny >= 0 && ny <= m - 1 && !st[nx][ny]) {
                pos[0] = nx;
                pos[1] = ny;
            }
            else {
                count = (count + 1) % 4;
                int nx = pos[0] + directions[count][0], ny = pos[1] + directions[count][1];
                if (st[nx][ny]) break;
                else {
                    pos[0] = nx;
                    pos[1] = ny;
                }
            }
        }
        return ans;
    }
};