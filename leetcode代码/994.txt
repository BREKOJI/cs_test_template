class Solution {

public:
    int orangesRotting(vector<vector<int>>& grid) {
        queue<pair<int, int>> q;
        int count = 0;// fresh oranges
        int rounds = 0;// circles
        int rows = grid.size(), cols = grid[0].size();
        for (int i = 0; i < rows; i ++ ) {
            for (int j = 0; j < cols; j ++ ) {
                if (grid[i][j] == 2) q.emplace(i, j);
                else if (grid[i][j] == 1) count ++ ;
            }
        }
        while (!q.empty()) {
            int cnt = q.size();
            for (int i = 0; i < cnt; i ++ ) {
                auto [x, y] = q.front();
                q.pop();
                if (x + 1 < rows && grid[x + 1][y] == 1) {
                    grid[x + 1][y] = 2;
                    q.emplace(x + 1, y);
                    count -- ;
                }
                if (x - 1 >= 0 && grid[x - 1][y] == 1) {
                    grid[x - 1][y] = 2;
                    q.emplace(x - 1, y);
                    count -- ;
                }
                if (y + 1 < cols && grid[x][y + 1] == 1) {
                    grid[x][y + 1] = 2;
                    q.emplace(x, y + 1);
                    count -- ;
                }
                if (y - 1 >= 0 && grid[x][y - 1] == 1) {
                    grid[x][y - 1] = 2;
                    q.emplace(x, y - 1);
                    count -- ;
                }
            }
            if (!q.empty()) rounds ++ ;
        }
        if (count == 0) return rounds;
        else return -1;
    }
};