class Solution {
public:
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
        vector<vector<pair<int, int>>> graph(n);
        vector<int> dist(n, INT_MAX);
        for (const auto & time : times) {
            int u = time[0];
            int v = time[1];
            int w = time[2];
            graph[u - 1].push_back({v - 1, w});
        }
        dist[k - 1] = 0;
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        pq.push({0, k - 1});
        while (!pq.empty()) {
            int u = pq.top().second;
            int currentDist = pq.top().first;
            pq.pop();
            if (currentDist > dist[u]) continue;
            for (auto & node : graph[u]) {
                int v = node.first;
                int w = node.second;
                if (dist[u] + w < dist[v]) {
                    dist[v] = dist[u] + w;
                    pq.push({dist[v], v});
                }
            }
        }
        int maxlen = ranges::max(dist);
        return maxlen == INT_MAX ? -1 : maxlen;
    }
};