class Solution {
    int n, m, sum = 0;
    void dfs(vector<vector<int>> & grid, int x, int y) {
        if (x < 0 || x >= n || y < 0 || y >= m || grid[x][y] != 1) return;
        sum ++ ;
        grid[x][y] = 2;
        dfs(grid, x - 1, y);
        dfs(grid, x + 1, y);
        dfs(grid, x, y - 1);
        dfs(grid, x, y + 1);
    }
public:
    int maxAreaOfIsland(vector<vector<int>>& grid) {
        n = grid.size(), m = grid[0].size();
        int MAX = 0;
        for (int i = 0; i < n; i ++ ) {
            for (int j = 0; j < m; j ++ ) {
                if (grid[i][j] == 1) {
                    sum = 0;
                    dfs(grid, i, j);
                    MAX = max(MAX, sum);
                }
            }
        }
        return MAX;
    }
};