class Solution {
    vector<vector<int>> edges;
    vector<int> visited;
    bool valid = true;
    void dfs(int u) {
        visited[u] = 1;
        for (auto v : edges[u]) {
            if (!visited[v]) {
                dfs(v);
                if (!valid) 
                    return;
            }
            else if (visited[v] == 1) {
                valid = false;
                return;
            }
        }
        visited[u] = 2;
    }
public:
    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {
        edges.resize(numCourses);
        visited.resize(numCourses);
        for (const auto & info : prerequisites)
            edges[info[1]].emplace_back(info[0]);
        for (int i = 0; i < numCourses; i ++ )
            if (!visited[i])
                dfs(i);
        return valid;
    }
};