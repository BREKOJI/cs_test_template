class Solution {
    bool backtrack(vector<int> & matchsticks, vector<int> & sides, int index, int target) {
        if (index == int(matchsticks.size()))
            return sides[0] == target && sides[1] == target && sides[2] == target && sides[3] == target;
        for (int i = 0; i < 4; i ++ ) {
            if (sides[i] + matchsticks[index] <= target) {
                sides[i] += matchsticks[index];
                if (backtrack(matchsticks, sides, index + 1, target))
                    return true;
                sides[i] -= matchsticks[index];
            }
        }
        return false;
    }
public:
    bool makesquare(vector<int>& matchsticks) {
        int total = accumulate(matchsticks.begin(), matchsticks.end(), 0);
        if (total % 4 != 0) return false;
        int target = total / 4;
        vector<int> sides(4, 0);
        sort(matchsticks.rbegin(), matchsticks.rend());
        return backtrack(matchsticks, sides, 0, target);
    }
};