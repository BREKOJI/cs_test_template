class Solution {
    vector<bool> dig1;
    vector<bool> dig2;
    vector<bool> rows;
    vector<bool> cols;
    vector<vector<string>> res;
    vector<string> paths;
    int len;
    void dfs(int row) {
        if (row == len) res.emplace_back(paths);
        string line(len, '.');
        for (int col = 0; col < len; col ++ ) {
            int d1 = row + col, d2 = row - col + len;
            if (!rows[row] && !cols[col] && !dig1[d1] && !dig2[d2]) {
                rows[row] = true;
                cols[col] = true;
                dig1[d1] = true;
                dig2[d2] = true;
                line[col] = 'Q';
                paths.emplace_back(line);
                dfs(row + 1);
                rows[row] = false;
                cols[col] = false;
                dig1[d1] = false;
                dig2[d2] = false;
                line[col] = '.';
                paths.pop_back();
            }
        }
    }
public:
    vector<vector<string>> solveNQueens(int n) {
        dig1.resize(2 * n);
        dig2.resize(2 * n);
        rows.resize(n);
        cols.resize(n);
        len = n;
        dfs(0);
        return res;
    }
};