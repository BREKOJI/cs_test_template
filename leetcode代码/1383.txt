class Solution {
    const int MOD = 1e9 + 7;
public:
    int maxPerformance(int n, vector<int>& speed, vector<int>& efficiency, int k) {
        vector<pair<int, int>> engineers(n);
        for (int i = 0; i < n; i ++ ) {
            engineers[i].first = efficiency[i];
            engineers[i].second = speed[i];
        }
        sort(engineers.rbegin(), engineers.rend());
        priority_queue<int, vector<int>, greater<>> pq;
        long sumspeed = 0;
        long maxperform = 0;
        for (auto [ef, sp] : engineers) {
            sumspeed += sp;
            pq.emplace(sp);
            if (pq.size() > k) {
                int minsp = pq.top();
                pq.pop();
                sumspeed -= minsp;
            }
            maxperform = max(maxperform, sumspeed * ef);
        }
        return int(maxperform % MOD);
    }
};