// 中心扩散法
class Solution {
public:
    string longestPalindrome(string s) {
        int n = s.length();
        if (n == 0 || n == 1) return s;
        int maxstart = 0;
        int maxend = 0;
        int maxlen = 0;
        for (int i = 0; i < n; i++) {
            int len = 1;
            int left = i - 1;
            int right = i + 1;
            while (left >= 0 && s[left] == s[i]) {
                left--;
                len++;
            }
            while (right < n && s[right] == s[i]) {
                right++;
                len++;
            }
            while (left >= 0 && right < n && s[right] == s[left]) {
                len += 2;
                left--;
                right++;
            }
            if (len > maxlen) {
                maxlen = len;
                maxstart = left + 1;
                maxend = right - 1;
            }
        }
        return s.substr(maxstart, maxlen);
    }
};

// 动态规划
class Solution {
public:
    string longestPalindrome(string s) {
        int n = s.size();
        vector dp(n, vector<bool> (n, true));
        int maxl = 0;
        int maxlen = 1;
        for (int r = 1; r < n; r ++ ) {
            for (int l = r - 1; l >= 0; l -- ) {
                if (s[l] == s[r]) dp[l][r] = dp[l + 1][r - 1];
                else dp[l][r] = false;
                if (dp[l][r] && r - l + 1 > maxlen) {
                    maxlen = r - l + 1;
                    maxl = l;
                }
            }
        }
        return s.substr(maxl, maxlen);
    }
};