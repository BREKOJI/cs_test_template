class Solution {
public:
    int maxProfit(vector<int>& prices) {
        // 0 表示持有股票（当日买入）
        // 1 表示不持有股票且当天24点后可以买入（昨日或昨日以前卖出）
        // 2 表示不持有股票且当天24点后处于冻结（当日卖出）
        // dp只得是某一天处于某种状态下的最大利润
        int n = prices.size();
        vector dp(n, vector<int> (3));
        dp[0][0] = -prices[0]; //表示第一天买入
        dp[0][1] = 0;//表示第一天不持有股票且24点后可以买入（即不买入）
        dp[0][2] = 0;//表示第一天不持有股票且24点后冻结（即当日卖出）
        for (int i = 1; i < n; i ++ ) {
            dp[i][0] = max(dp[i - 1][1] - prices[i], dp[i - 1][0]);
            dp[i][1] = max(dp[i - 1][2], dp[i - 1][1]);
            dp[i][2] = dp[i - 1][0] + prices[i];
        }
        return max(dp[n - 1][2], dp[n - 1][1]);
    }
};