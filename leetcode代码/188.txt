class Solution {
public:
    int maxProfit(int k, vector<int>& prices) {
        int n = prices.size();
        // vector<vector<vector<int>>> dp(n, vector<vector<int>> (k, vector<int> (2)));
        int dp[n][k][2];
        memset(dp, 0, sizeof dp);
        for (int i = 0; i < k; i ++ ) {
            dp[0][i][0] = -prices[0];
        }
        for (int i = 1; i < n; i ++ ) {
            dp[i][0][0] = max(dp[i - 1][0][0], -prices[i]);
            dp[i][0][1] = max(dp[i - 1][0][1], dp[i - 1][0][0] + prices[i]);
            for (int j = 1; j < k; j ++ ) {
                dp[i][j][0] = max(dp[i - 1][j][0], dp[i - 1][j - 1][1] - prices[i]);
                dp[i][j][1] = max(dp[i - 1][j][1], dp[i - 1][j][0] + prices[i]);
            }
        }
        int MAX = 0;
        for (int i = 0; i < k; i ++ ) {
            MAX = max(MAX, dp[n - 1][i][1]);
        }
        return MAX;
    }
};