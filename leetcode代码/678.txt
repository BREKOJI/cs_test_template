// dynamic rule
class Solution {
public:
    bool checkValidString(string s) {
        int n = s.size();
        vector dp(n + 1, vector<bool> (n + 1));
        dp[0][0] = true;
        for (int i = 1; i <= n; i ++ ) {
            for (int j = 0; j <= i; j ++ ) {
                if (s[i - 1] == '(') {
                    if (j - 1 >= 0) dp[i][j] = dp[i - 1][j - 1];
                }
                else if (s[i - 1] == ')') {
                    if (j + 1 <= i - 1) dp[i][j] = dp[i - 1][j + 1];
                }
                else {
                    dp[i][j] = dp[i - 1][j];
                    if (j - 1 >= 0) dp[i][j] = dp[i][j] || dp[i - 1][j - 1];
                    if (j + 1 <= i - 1) dp[i][j] = dp[i][j] || dp[i - 1][j + 1];
                }
            }
        }
        return dp[n][0];
    }
};

// heap
class Solution {
public:
    bool checkValidString(string s) {
        stack<int> leftStack;
        stack<int> starStack;
        int n = s.size();
        for (int i = 0; i < n; i ++ ) {
            if (s[i] == '(')
                leftStack.push(i);
            else if (s[i] == '*')
                starStack.push(i);
            else {
                if (!leftStack.empty()) leftStack.pop();
                else if (!starStack.empty()) starStack.pop();
                else return false;
            }
        }
        while (!leftStack.empty() && !starStack.empty()) {
            if (starStack.top() > leftStack.top()) {
                starStack.pop();
                leftStack.pop();
            }
            else return false;
        }
        return leftStack.empty();
    }
};