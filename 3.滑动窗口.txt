#include <vector>
#include <string>
#include <unordered_map>

using namespace std;

class Solution {
public:
    vector<int> findAnagrams(string s, string p) {
        // 创建need和window两个哈希表
        unordered_map<char, int> need;
        unordered_map<char, int> window;
        // 初始化need
        for (char c : p) {
            need[c]++;
        }

        int left = 0, right = 0;
        // 表示窗口中满足need条件的字符个数
        int valid = 0;
        vector<int> result;

        while (right < s.size()) {
            char c = s[right];
            // 右移窗口
            right++;
            // 进行窗口内数据的一系列更新
            if (need.count(c)) {
                window[c]++;
                if (window[c] == need[c]) {
                    valid++;
                }
            }

            // 判断左侧窗口是否要收缩
            while (right - left >= p.size()) {  // 当窗口长度>=目标串时触发收缩
                // 当满足所有字符条件时记录结果
                if (valid == need.size()) {
                    result.push_back(left);
                }
                // d是将移出窗口的字符
                char d = s[left];
                // 左移窗口
                left++;
                // 进行窗口内数据的一系列更新
                if (need.count(d)) {
                    if (window[d] == need[d]) {
                        valid--;
                    }
                    window[d]--;
                }
            }
        }
        return result;
    }
};